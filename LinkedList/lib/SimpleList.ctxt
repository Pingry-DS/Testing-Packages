#BlueJ class context
comment0.params=
comment0.target=int\ size()
comment0.text=\n\ Returns\ the\ number\ of\ elements\ in\ this\ list.\ \ If\ this\ list\ contains\n\ more\ than\ <tt>Integer.MAX_VALUE</tt>\ elements,\ returns\n\ <tt>Integer.MAX_VALUE</tt>.\n\n\ @return\ the\ number\ of\ elements\ in\ this\ list\n
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\n\ Returns\ <tt>true</tt>\ if\ this\ list\ contains\ no\ elements.\n\n\ @return\ <tt>true</tt>\ if\ this\ list\ contains\ no\ elements\n
comment10.params=index\ element
comment10.target=void\ add(int,\ java.lang.Object)
comment10.text=\n\ Inserts\ the\ specified\ element\ at\ the\ specified\ position\ in\ this\ list\n\ (optional\ operation).\ \ Shifts\ the\ element\ currently\ at\ that\ position\n\ (if\ any)\ and\ any\ subsequent\ elements\ to\ the\ right\ (adds\ one\ to\ their\n\ indices).\n\n\ @param\ index\ index\ at\ which\ the\ specified\ element\ is\ to\ be\ inserted\n\ @param\ element\ element\ to\ be\ inserted\n\ @throws\ UnsupportedOperationException\ if\ the\ <tt>add</tt>\ operation\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ this\ list\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ list\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\ and\n\ \ \ \ \ \ \ \ \ this\ list\ does\ not\ permit\ null\ elements\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ list\n\ @throws\ IndexOutOfBoundsException\ if\ the\ index\ is\ out\ of\ range\n\ \ \ \ \ \ \ \ \ (<tt>index\ &lt;\ 0\ ||\ index\ &gt;\ size()</tt>)\n
comment11.params=index
comment11.target=java.lang.Object\ remove(int)
comment11.text=\n\ Removes\ the\ element\ at\ the\ specified\ position\ in\ this\ list\ (optional\n\ operation).\ \ Shifts\ any\ subsequent\ elements\ to\ the\ left\ (subtracts\ one\n\ from\ their\ indices).\ \ Returns\ the\ element\ that\ was\ removed\ from\ the\n\ list.\n\n\ @param\ index\ the\ index\ of\ the\ element\ to\ be\ removed\n\ @return\ the\ element\ previously\ at\ the\ specified\ position\n\ @throws\ IndexOutOfBoundsException\ if\ the\ index\ is\ out\ of\ range\n\ \ \ \ \ \ \ \ \ (<tt>index\ &lt;\ 0\ ||\ index\ &gt;\=\ size()</tt>)\n
comment12.params=o
comment12.target=int\ indexOf(java.lang.Object)
comment12.text=\n\ Returns\ the\ index\ of\ the\ first\ occurrence\ of\ the\ specified\ element\n\ in\ this\ list,\ or\ -1\ if\ this\ list\ does\ not\ contain\ the\ element.\n\ More\ formally,\ returns\ the\ lowest\ index\ <tt>i</tt>\ such\ that\n\ <tt>(o\=\=null&nbsp;?&nbsp;get(i)\=\=null&nbsp;\:&nbsp;o.equals(get(i)))</tt>,\n\ or\ -1\ if\ there\ is\ no\ such\ index.\n\n\ @param\ o\ element\ to\ search\ for\n\ @return\ the\ index\ of\ the\ first\ occurrence\ of\ the\ specified\ element\ in\n\ \ \ \ \ \ \ \ \ this\ list,\ or\ -1\ if\ this\ list\ does\ not\ contain\ the\ element\n\ @throws\ ClassCastException\ if\ the\ type\ of\ the\ specified\ element\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ list\n\ \ \ \ \ \ \ \ \ (<a\ href\="Collection.html\#optional-restrictions">optional</a>)\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\ and\ this\n\ \ \ \ \ \ \ \ \ list\ does\ not\ permit\ null\ elements\n\ \ \ \ \ \ \ \ \ (<a\ href\="Collection.html\#optional-restrictions">optional</a>)\n
comment2.params=o
comment2.target=boolean\ contains(java.lang.Object)
comment2.text=\n\ Returns\ <tt>true</tt>\ if\ this\ list\ contains\ the\ specified\ element.\n\ More\ formally,\ returns\ <tt>true</tt>\ if\ and\ only\ if\ this\ list\ contains\n\ at\ least\ one\ element\ <tt>e</tt>\ such\ that\n\ <tt>(o\=\=null&nbsp;?&nbsp;e\=\=null&nbsp;\:&nbsp;o.equals(e))</tt>.\n\n\ @param\ o\ element\ whose\ presence\ in\ this\ list\ is\ to\ be\ tested\n\ @return\ <tt>true</tt>\ if\ this\ list\ contains\ the\ specified\ element\n\ @throws\ ClassCastException\ if\ the\ type\ of\ the\ specified\ element\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ list\n\ (<a\ href\="Collection.html\#optional-restrictions">optional</a>)\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\ and\ this\n\ \ \ \ \ \ \ \ \ list\ does\ not\ permit\ null\ elements\n\ (<a\ href\="Collection.html\#optional-restrictions">optional</a>)\n
comment3.params=
comment3.target=java.util.Iterator\ iterator()
comment3.text=\n\ Returns\ an\ iterator\ over\ the\ elements\ in\ this\ list\ in\ proper\ sequence.\n\n\ @return\ an\ iterator\ over\ the\ elements\ in\ this\ list\ in\ proper\ sequence\n
comment4.params=e
comment4.target=boolean\ add(java.lang.Object)
comment4.text=\n\ Appends\ the\ specified\ element\ to\ the\ end\ of\ this\ list\ (optional\n\ operation).\n\n\ <p>Lists\ that\ support\ this\ operation\ may\ place\ limitations\ on\ what\n\ elements\ may\ be\ added\ to\ this\ list.\ \ In\ particular,\ some\n\ lists\ will\ refuse\ to\ add\ null\ elements,\ and\ others\ will\ impose\n\ restrictions\ on\ the\ type\ of\ elements\ that\ may\ be\ added.\ \ List\n\ classes\ should\ clearly\ specify\ in\ their\ documentation\ any\ restrictions\n\ on\ what\ elements\ may\ be\ added.\n\n\ @param\ e\ element\ to\ be\ appended\ to\ this\ list\n\ @return\ <tt>true</tt>\ (as\ specified\ by\ {@link\ Collection\#add})\n\ @throws\ UnsupportedOperationException\ if\ the\ <tt>add</tt>\ operation\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ this\ list\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ list\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\ and\ this\n\ \ \ \ \ \ \ \ \ list\ does\ not\ permit\ null\ elements\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ this\ element\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ list\n
comment5.params=o
comment5.target=boolean\ remove(java.lang.Object)
comment5.text=\n\ Removes\ the\ first\ occurrence\ of\ the\ specified\ element\ from\ this\ list,\n\ if\ it\ is\ present\ (optional\ operation).\ \ If\ this\ list\ does\ not\ contain\n\ the\ element,\ it\ is\ unchanged.\ \ More\ formally,\ removes\ the\ element\ with\n\ the\ lowest\ index\ <tt>i</tt>\ such\ that\n\ <tt>(o\=\=null&nbsp;?&nbsp;get(i)\=\=null&nbsp;\:&nbsp;o.equals(get(i)))</tt>\n\ (if\ such\ an\ element\ exists).\ \ Returns\ <tt>true</tt>\ if\ this\ list\n\ contained\ the\ specified\ element\ (or\ equivalently,\ if\ this\ list\ changed\n\ as\ a\ result\ of\ the\ call).\n\n\ @param\ o\ element\ to\ be\ removed\ from\ this\ list,\ if\ present\n\ @return\ <tt>true</tt>\ if\ this\ list\ contained\ the\ specified\ element\n\ @throws\ ClassCastException\ if\ the\ type\ of\ the\ specified\ element\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ list\n\ (<a\ href\="Collection.html\#optional-restrictions">optional</a>)\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\ and\ this\n\ \ \ \ \ \ \ \ \ list\ does\ not\ permit\ null\ elements\n\ (<a\ href\="Collection.html\#optional-restrictions">optional</a>)\n\ @throws\ UnsupportedOperationException\ if\ the\ <tt>remove</tt>\ operation\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ this\ list\n
comment6.params=
comment6.target=void\ clear()
comment6.text=\n\ Removes\ all\ of\ the\ elements\ from\ this\ list\ (optional\ operation).\n\ The\ list\ will\ be\ empty\ after\ this\ call\ returns.\n
comment7.params=o
comment7.target=boolean\ equals(java.lang.Object)
comment7.text=\n\ Compares\ the\ specified\ object\ with\ this\ list\ for\ equality.\ \ Returns\n\ <tt>true</tt>\ if\ and\ only\ if\ the\ specified\ object\ is\ also\ a\ list,\ both\n\ lists\ have\ the\ same\ size,\ and\ all\ corresponding\ pairs\ of\ elements\ in\n\ the\ two\ lists\ are\ <i>equal</i>.\ \ (Two\ elements\ <tt>e1</tt>\ and\n\ <tt>e2</tt>\ are\ <i>equal</i>\ if\ <tt>(e1\=\=null\ ?\ e2\=\=null\ \:\n\ e1.equals(e2))</tt>.)\ \ In\ other\ words,\ two\ lists\ are\ defined\ to\ be\n\ equal\ if\ they\ contain\ the\ same\ elements\ in\ the\ same\ order.\ \ This\n\ definition\ ensures\ that\ the\ equals\ method\ works\ properly\ across\n\ different\ implementations\ of\ the\ <tt>List</tt>\ interface.\n\n\ @param\ o\ the\ object\ to\ be\ compared\ for\ equality\ with\ this\ list\n\ @return\ <tt>true</tt>\ if\ the\ specified\ object\ is\ equal\ to\ this\ list\n
comment8.params=index
comment8.target=java.lang.Object\ get(int)
comment8.text=\n\ Returns\ the\ element\ at\ the\ specified\ position\ in\ this\ list.\n\n\ @param\ index\ index\ of\ the\ element\ to\ return\n\ @return\ the\ element\ at\ the\ specified\ position\ in\ this\ list\n\ @throws\ IndexOutOfBoundsException\ if\ the\ index\ is\ out\ of\ range\n\ \ \ \ \ \ \ \ \ (<tt>index\ &lt;\ 0\ ||\ index\ &gt;\=\ size()</tt>)\n
comment9.params=index\ element
comment9.target=java.lang.Object\ set(int,\ java.lang.Object)
comment9.text=\n\ Replaces\ the\ element\ at\ the\ specified\ position\ in\ this\ list\ with\ the\n\ specified\ element\ (optional\ operation).\n\n\ @param\ index\ index\ of\ the\ element\ to\ replace\n\ @param\ element\ element\ to\ be\ stored\ at\ the\ specified\ position\n\ @return\ the\ element\ previously\ at\ the\ specified\ position\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ list\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\ and\n\ \ \ \ \ \ \ \ \ this\ list\ does\ not\ permit\ null\ elements\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ list\n\ @throws\ IndexOutOfBoundsException\ if\ the\ index\ is\ out\ of\ range\n\ \ \ \ \ \ \ \ \ (<tt>index\ &lt;\ 0\ ||\ index\ &gt;\=\ size()</tt>)\n
numComments=13
